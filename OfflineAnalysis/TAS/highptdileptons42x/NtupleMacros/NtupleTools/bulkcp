#!/usr/bin/env perl
#
# Author: Jacob Ribnik
#         jribnik@cern.ch
#
# bulkcp

my $version = "1.3.0";

use warnings;
use strict;
use File::Path;
use Getopt::Long;
use POSIX;
use POSIX ":sys_wait_h";
use Term::Cap;

##################################
# Command line arguments and env #
##################################
usage() if (@ARGV == 0);

my $nthreads = 5; # maximum parallel transfers
my $protocol = "scp";
my $host = "uaf-4.t2.ucsd.edu";
my $srm = "srm://bsrm-1.t2.ucsd.edu:8443/srm/v2/server?SFN=";
my $test = 0;
my $verbose = 0;

GetOptions("n|nthreads=i" => \$nthreads,
           "h|help"       => \&usage,
           "p|protocol=s" => \$protocol,
           "r|host=s"     => \$host,
           "s|srm=s"      => \$srm,
           "t|test"       => \$test,
           "v|verbose"    => \$verbose);
usage() if (@ARGV != 2);

die "Error: nthreads must be > 0\n" unless ($nthreads > 0);
die "Error: $protocol is not a supported protocol\n" unless ($protocol eq "scp" || $protocol eq "rsync" || $protocol eq "lcg-cp");
$verbose = 1 if ($test == 1);

my $remote = $ARGV[0];
if ($protocol eq 'lcg-cp')
{
    $host = $srm;
}
else
{
    my @argv0s = split(':', $remote);
    # remotehost specified on command line
    if (@argv0s == 2)
    {
        $host   = $argv0s[0];
        $remote = $argv0s[1];
    }
}

my $local  = glob $ARGV[1]; # glob expands
# If $local does not begin with / prepend $PWD
$local = "$ENV{PWD}/$1" if ($local =~ m/^([^\/].*)$/);

# Minimal check of ssh-agent in case of scp
# and rsync, voms-proxy-info for lcg-cp
if ($protocol eq "scp" || $protocol eq "rsync")
{
    system "ssh-add -l >/dev/null 2>&1";
    if ($? != 0)
    {
        print <<EOF;
Error: password-less ssh not configured

This requires an ssh-key. If you do not have one:

> ssh-keygen -t dsa

Add an ssh-key to an ssh-agent:

> ssh-agent /bin/bash
> ssh-add # adds ~/.ssh/id_dsa by default
EOF
        exit;
    }
}
else
{
    chomp(my $tmp = `voms-proxy-info -timeleft 2>&1`);
    if ($? != 0 || $tmp eq "0")
    {
        print <<EOF;
Error: valid proxy not found

If you are setup to use the grid:

> voms-proxy-init -voms cms

otherwise you need more help.
EOF
        exit;
    }
}

if ($verbose)
{
    print <<EOF;
bulkcp v$version
******************** Be loquacious! *******************
protocol:    $protocol
remote host: $host
files:       $remote
local path:  $local
nthreads:    $nthreads
*******************************************************
EOF
}

##################################
# Ready to do interesting things #
##################################

# Get list of files to transfer and their
# types and sizes
print "Generating list of files\n" if ($verbose == 1);
my @lines = ();
# This works fine with find 4.2.27, i.e. SLC5, but not with find 4.1.20, i.e. SLC4
#chomp(@lines = `ssh $host "find -L $remote -printf \\\"\%y \%p \%s\\\\n\\\" 2>/dev/null"`) if ($protocol eq "scp" || $protocol eq "rsync");
# Here is a workaround for both versions
chomp(@lines = `ssh $host "find $remote -follow -ls | awk '{if(index(\\\$3,\\"-\\")==1){type=\\\"f\\\"}else{type=\\\"d\\\"}print type,\\\$11,\\\$7}' 2>/dev/null"`) if ($protocol eq "scp" || $protocol eq "rsync");
chomp(@lines = `lcg-ls -l $srm$remote | awk '{tmp=substr(\$1,1,1);sub(/-/,\"f\",tmp);print tmp,\$7,\$5}' 2>/dev/null`) if ($protocol eq "lcg-cp");

# Some statistics for when we exit
my $nfiles = 0;
my $total_size = 0;

# Pre-process to populate statistics
foreach my $line (@lines)
{
    $line =~ m/^(\S) (\S+) (\d+)$/;
    my $type = $1;
    my $file = $2;
    my $size = $3;
    if ($type eq "f")
    {
        print "$file\n" if ($verbose == 1);
        ++$nfiles;
        $total_size += $size;
    }
}

print "Fetching $nfiles files ($total_size bytes)\n";
exit if ($nfiles == 0);
if ($test == 1)
{
    print "but not really because this is test mode ;)\n";
    exit;
}

my $start_time = time;

# Launch scheduling and monitoring daemons
# Parent process is the monitoring daemon
my $sched_pid = open(SCHED, "-|");

if ($sched_pid)
# This is where we monitor
{
    my %act_pids_file = (); # active pids -> file
    my %act_pids_size = (); # active pids -> file size
    my %all_pids_exit = (); # exit values
    my %all_pids_size = (); # total bytes transferred
    my $nfiles_done = 0;

    # Initialize terminal for reporting
    my $termios = new POSIX::Termios;
    $termios->getattr;
    my $ospeed = $termios->getospeed;
    my $tcap = Term::Cap->Tgetent ({ TERM => undef, OSPEED => $ospeed });
    $tcap->Trequire(qw(cd cr do up));

    while (my $from_sched = <SCHED>)
    {
        # Scheduler action?
        if ($from_sched =~ m/^(\w) (\d+) (\S+) ?(\d+)?$/)
        {
            # If $1 eq "b" then a job with pid $2
            # has begun. Report status of file $3
            # with size $4 in bytes
            # If $1 eq "e" then a job with pid $2
            # has finished with exit value $3

            my $action = $1;
            my $pid = $2;
            if ($action eq "b")
            {
                my $file = $3;
                my $size = $4;
                $act_pids_file{$pid} = $file;
                $act_pids_size{$pid} = $size;
                $all_pids_exit{$pid} = -1;
                $all_pids_size{$pid} = 0;
            }
            else
            {
                my $exit = $3;
                $all_pids_exit{$pid} = $exit;
                $all_pids_size{$pid} = $act_pids_size{$pid};
                ++$nfiles_done;
                delete $act_pids_file{$pid};
                delete $act_pids_size{$pid};
            }
        }

        # No point sticking around if this
        # is the case, though the reported
        # number of files received will be
        # n minus 1
        last if ($nfiles_done == $nfiles);

        # Ready terminal
        $tcap->Tputs('cr', 1, *STDOUT); # carriage return
        $tcap->Tputs('cd', 1, *STDOUT); # clear down

        # Query running jobs
        for my $pid (keys %act_pids_file)
        {
            my $file = $act_pids_file{$pid};
            my $curr_size = 0;
            if ($protocol eq "rsync")
            {
                # Get current size from the temp files
                # created by rsync
                $file =~ m/^(\S+)\/(\S+)$/;
                my $path = $1;
                my $trunc_file = $2;
                # On this host the temp files begin with '.'
                # and end with \S{6,6} or \w{6,6} afaict but
                # maybe rsync is different on other hosts?
                # As I am unsure we will not use -regexp and
                # use find .$trunc_file.* until it fails us
                $curr_size = `find $path/.$trunc_file.* -printf \"\%s\" 2>/dev/null`;
            }
            else
            {
                $curr_size = `find $file -printf \"\%s\" 2>/dev/null`;
            }
            $all_pids_size{$pid} = $curr_size unless ($? != 0);
        }

        # Report all transfers
        my $curr_total_size = 0;
        for my $pid (keys %all_pids_size)
        {
            $curr_total_size += $all_pids_size{$pid};
        }
        my $percent_done = $total_size ? ($curr_total_size/$total_size)*100.: 0.;
        $| = 1; # flush buffer
        printf "Received $nfiles_done of $nfiles ($curr_total_size/$total_size = %.1f percent)", $percent_done;

        # Report active transfers
        if ($verbose == 1)
        {
            my $nactive = scalar keys %act_pids_file;
            $| = 1; # flush buffer
            print "\n$nactive active transfers:\n";

            for my $pid (keys %act_pids_file)
            {
                $percent_done = $act_pids_size{$pid} ? ($all_pids_size{$pid}/$act_pids_size{$pid})*100. : 0.;
                $| = 1; # flush buffer
                printf "$act_pids_file{$pid} ($all_pids_size{$pid}/$act_pids_size{$pid} = %.1f percent)\n", $percent_done;
            }

            my $nlines = $nactive+2;
            for(my $i = 0; $i < $nlines; ++$i)
            {
                $tcap->Tputs('up', 1, *STDOUT);
            }
        }
    }

    $| = 1; # flush buffer
    print "\n\n" if ($verbose == 1);
    print "\n\n";
}
else
# This is where we schedule
{
    # Track number and pids of forked jobs
    my $count = 0;

    # Consider the first file only
    my $first = 1;

    # Base directory of the remote transfer
    my $base_dir = ""; 

    # Let's do this
    foreach my $line (@lines)
    {
        $line =~ m/^(\S) ((\S+)\/\S+) (\d+)$/;
        my $type = $1;
        my $file = $2;
        my $remote_path = $3;
        my $size = $4;

        if ($first == 1)
        {
            $base_dir = $remote_path;
            $first = 0;
        }

        $file =~ m/^$base_dir\/(\S+)$/;
        my $rel_to_base_dir = $1;
        my $local_file = "$local/$rel_to_base_dir";

        # If directory then make directory,
        # and continue.
        # Pas pour lcg-cp until I write a
        # lcg-find which will never happen
        if ($type eq "d")
        {
            if ($protocol ne "lcg-cp")
            {
                # Does directory exist?
                if (! -d $local_file)
                {
                    die "Error: unable to mkpath($local_file)\n" unless mkpath($local_file);
                }
            }

            next;
        }

        # Patient people only $nthreads
        # at a time
        while ($count >= $nthreads)
        {
            my $dip = waitpid(-1, WNOHANG);
            if ($dip == 0)
            {
                # heartbeat
                print "ping\n";
                sleep 1;

                next;
            }

            --$count;

            $| = 1; # flush buffer
            print "e $dip $?\n";
        }

        ++$count;
        my $pid = fork();

        if ($pid)
        {
            $| = 1; # flush buffer
            print "b $pid $local_file $size\n";
        }
        else
        {
            system "scp $host:$file $local_file >/dev/null 2>&1" if ($protocol eq "scp");
            system "rsync -az -e ssh $host:$file $local_file >/dev/null 2>&1" if ($protocol eq "rsync");
            system "lcg-cp -D srmv2 -t 3600 $srm$file file:///$local_file >/dev/null 2>&1" if ($protocol eq "lcg-cp");
            exit $?;
        }
    }

    while ((my $dip = waitpid(-1, WNOHANG)) > -1)
    {
        if ($dip == 0)
        {
            # heartbeat
            print "ping\n";
            sleep 1;

            next;
        }

        --$count;

        $| = 1; # flush buffer
        print "e $dip $?\n";
    }

    exit;  
}

my $end_time = time;
my $elapsed_time = $end_time-$start_time;
my $avg_rate = ($total_size/1024./1024.)/$elapsed_time; # in MB/s

print "Elapsed time: $elapsed_time seconds\n";
printf "Avgerage rate: %.1f MB/s\n", $avg_rate;

sub usage
{
    print <<EOF;
Usage: bulkcp [-n nthreads] [-p protocol] [remotehost:]remotefiles localpath

    -n, --nthreads    number of parallel transfers; default is 5
    -h, --help        display usage
    -p, --protocol    transfer protocol; supported protocols are
                      scp, rsync and lcg-cp; default is scp
    -r, --host        remote host; default is uaf-4.t2.ucsd.edu
    -s, --srm         default is srm://bsrm-1.t2.ucsd.edu:8443/srm/v2/server?SFN=
    -t, --test        don't do anything, just be loquacious
    -v, --verbose     be loquacious
EOF
    exit;
}
